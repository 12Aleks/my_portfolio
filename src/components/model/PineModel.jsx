/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: matt z chan (https://sketchfab.com/mattzch)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/japanese-black-pine-f0cb4705f1c446c7bc393fdbfcdf024a
Title: Japanese Black Pine
*/

"use client"
import {useMemo, useRef} from 'react'
import {useGLTF} from '@react-three/drei';
import {useFrame, useLoader} from "@react-three/fiber";
import * as THREE from "three";


export function PineModel({ config = {} }) {
    const modelRef = useRef();
    const lightRef = useRef();
    const moonRef = useRef();
    const texture = useLoader(THREE.TextureLoader, '/moon.jpg');
    const {
        floatAmplitude = 0.01,
        floatSpeed = 1,
        lightIntensity = 1,
        flickerSpeed = 1.5,
        light = 0
    } = config;

    const {nodes, materials} = useGLTF('/models/japanese_black_pine-transformed.glb');

    const randomPhaseShift = useMemo(() => Math.random() * Math.PI * 2, []);

    useFrame((state) => {
        const time = state.clock.elapsedTime;

        if (modelRef.current) {
            modelRef.current.position.y = -3.9 + Math.sin(time * floatSpeed + randomPhaseShift) * floatAmplitude;
        }

        if (lightRef.current) {
            lightRef.current.intensity = 1 + lightIntensity + Math.sin(time * flickerSpeed) * 0.9;
        }

        if (moonRef.current) {
            const t = (Math.sin(time * 0.5) + 1) / 2;
            const color1 = new THREE.Color(0x9ecfff);
            const color2 = new THREE.Color(0xb3a6ff);
            const blendedColor = color1.clone().lerp(color2, t);
            moonRef.current.material.color.set(blendedColor);
        }
    });

    return (
        <>
            <directionalLight
                ref={lightRef}
                position={[0, 10, -5]} // Свет сверху и немного спереди
                intensity={lightIntensity}
                color={new THREE.Color(0x9ecfff)}
                castShadow
                shadow-mapSize-width={1048}
                shadow-mapSize-height={1048}
            />

            {light && <mesh
                ref={moonRef}
                position={[0, 1, 0]}
            >
                <sphereGeometry args={[1.2, 32, 32]} />
                <meshPhysicalMaterial
                    map={texture}
                    roughness={0.8}
                    metalness={0.1}
                    emissive={0xaaaaaa}
                    emissiveIntensity={0.2}
                />
            </mesh>}
            <group
                ref={modelRef}
                scale={[1, 1, 1]}
                position={[0, -3.9, 0]}
                rotation={[-0.4, Math.PI / -3, 0]}
                dispose={null}
            >
                <mesh
                    name="Object_2"
                    castShadow
                    receiveShadow
                    geometry={nodes.Object_2.geometry}
                    material={materials.Default_1}
                    rotation={[-Math.PI / 2.5, -.1, -.2]}
                />
                <mesh
                    name="Object_3"
                    castShadow
                    receiveShadow
                    geometry={nodes.Object_3.geometry}
                    material={materials.Standardmaterial}
                    rotation={[-Math.PI / 2.5, -.1, -.2]}
                />
                <mesh
                    name="Object_5"
                    castShadow
                    receiveShadow
                    geometry={nodes.Object_5.geometry}
                    material={materials.wire_143224087}
                    rotation={[-Math.PI / 2.5, -.1, -.2]}
                />
            </group>
        </>
    )
}

useGLTF.preload('/models/japanese_black_pine-transformed.glb')